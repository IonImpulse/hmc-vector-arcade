#include "util.hpp"
#include <cstdio>

// Constructors

vec3::vec3(float x, float y, float z) {
    elems = {x, y, z};
}

vec4::vec4(float x, float y, float z, float w) {
    elems = {x, y, z, w};
}

mat3::mat3(float input[3][3]) {
    for (int row = 0; row < 3; row++) {
        for (int col = 0; col < 3; col++) {
            elems[row][col] = input[row][col];
        }
    }
}

mat4::mat4(float input[4][4]) {
    for (int row = 0; row < 4; row++) {
        for(int col = 0; col < 4; col++) {
            elems[row][col] = input[row][col];
        }
    }
}

// Destructors (Currently all properties are stack initialized, so there's nothing to destroy!)

vec3::~vec3(){}
vec4::~vec4(){}
mat3::~mat3(){}
mat4::~mat4(){}

// Log functions

void vec3::log() {
    printf("<%3f, %3f, %3f>\n", elems[0], elems[1], elems[2]);
}

void vec4::log() {
    printf("<%3f, %3f, %3f, %3f>\n", elems[0], elems[1], elems[2], elems[3]);
}

void mat3::log() {
    printf("%3f, %3f, %3f\n", elems[0][0], elems[0][1], elems[0][2]);
    printf("%3f, %3f, %3f\n", elems[1][0], elems[1][1], elems[1][2]);
    printf("%3f, %3f, %3f\n", elems[2][0], elems[2][1], elems[2][2]);
}

void mat4::log() {
    printf("%3f, %3f, %3f, %3f\n", elems[0][0], elems[0][1], elems[0][2], elems[0][3]);
    printf("%3f, %3f, %3f, %3f\n", elems[1][0], elems[1][1], elems[1][2], elems[1][3]);
    printf("%3f, %3f, %3f, %3f\n", elems[2][0], elems[2][1], elems[2][2], elems[2][3]);
    printf("%3f, %3f, %3f, %3f\n", elems[3][0], elems[3][1], elems[3][2], elems[3][3]);
}

// =

vec3& vec3::operator=(const vec3& other) {
    elems = {other[0], other[1], other[2]}; 
    return *this;
}

vec4& vec4::operator=(const vec4& other) {
    elems[0] = other[0] 
    return *this;
}
